{"version":3,"sources":["../index.js"],"names":["require","config","msg_types","Sphinx","MSG_TYPE","initted","client","sphinxToken","process","env","SPHINX_TOKEN","init","Client","login","on","INSTALL","message","console","log","embed","MessageEmbed","setAuthor","setDescription","setThumbnail","botSVG","channel","send","MESSAGE","arr","content","split","length","maxAmount","parseInt","fetchData","urlString","printOut","setTitle","url","axios","get","then","res","data","catch","err"],"mappings":"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","sourcesContent":["import 'regenerator-runtime/runtime.js';\nimport * as Sphinx from 'sphinx-bot'\nimport * as fetch from 'node-fetch'\nimport axios from 'axios';\nrequire('dotenv').config();\nconst msg_types = Sphinx.MSG_TYPE\n\n\nlet initted = false\nlet client\n\n/*\n// SPHINX_TOKEN contains id,secret,and url\n// message.channel.send sends to the url the data\n*/\n\nconst sphinxToken = process.env.SPHINX_TOKEN\n\n\nasync function init() {\n  if (initted) return\n  initted = true\n\n  client = new Sphinx.Client()\n  client.login(sphinxToken)\n\n  client.on(msg_types.INSTALL, async (message) => {\n    console.log('=> Installing')\n    const embed = new Sphinx.MessageEmbed()\n      .setAuthor('RustOff')\n      .setDescription('Welcome to RustOff! Enter /maxpaid followed by a number to set the maximum price for paid content.')\n      .setThumbnail(botSVG)\n    message.channel.send({ embed })\n  })\n\n  client.on(msg_types.MESSAGE, async (message) => {\n    const arr = message.content.split(' ')\n    if (arr.length < 2) return\n    if (arr[0] !== '/maxpaid') return\n    const maxAmount = parseInt(arr[1])\n    if(!maxAmount) return\n\n    const printOut = await fetchData(urlString)\n    console.log('printout', printOut)\n\n    const embed = new Sphinx.MessageEmbed()\n      .setAuthor('RustOff Bot')\n      .setTitle('Number Fact:')\n      .setDescription(printOut)\n      .setThumbnail(botSVG)\n    message.channel.send({ embed })\n  })\n}\n\nconst botSVG = `<svg viewBox=\"64 64 896 896\" height=\"12\" width=\"12\" fill=\"white\">\n  <path d=\"M300 328a60 60 0 10120 0 60 60 0 10-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 10120 0 60 60 0 10-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" />\n</svg>`\n\ninit()\n\nconst fetchData = (url) => {\n  return axios.get(url)\n  .then(res =>{\n    //handle success\n    console.log('res.data', res.data)\n    return res.data;\n  })\n  .catch(err => {\n    console.log(err);\n  })\n}"],"file":"index.js"}